// for(let num = 2; num <= 100; num++){
//     let divisors = 0; //約数の数
//     for (let i = 1; i <= num; i ++){
//         if(num%i == 0){
//             divisors++;
//         }
//     }
//     if(divisors == 2){
//         document.write(`<p>${num}</p>`);
//     }
// }

for(let n = 2; n <= 100 ; n++){ // 外側のループ。100まで1ずつ増やす。
    let divisors = 0; // 約数として定義する変数の値を0に設定
    
    // 外側のループがnの値を2から100まで進めるごとに、内側のループはそのnに対して1からnまでの各iで割り切れるかを試します。これにより、nの約数を全て洗い出すことができます。
    for(let i = 1; i <= n ; i++){
        if(n % i == 0){ // 外側のループで設定したnに対して内側ループiが割り切れるなら
        divisors++ // 約数のカウントを増やす
        }
    }

    if(divisors == 2){ // 約数が2つということは素数ということだから
        document.writes(`<p>${n}<p/>`) //素数を表示
    }
}


//処理順序
//①外側ループでnの値を1加算する。
//②①の処理でループが行われる間で内側ループの処理が走る
//  - 約数かどうかを確かめるための変数(i)をn以下の値で1ずつ増やす。
//  - nに対してiで割り切れるかどうか(約数になり得るか）を割り算しながら確かめる。
//  - 割り切れた(約数になると判断出来る)場合、約数の実数として`divisors`の値を`n`(外側ループの処理中の値)以下の範囲で1ずつ加算する。
//③`divisors`(約数)が2の場合は素数のため、素数という条件を満たす場合は値を表示する。
// 以降は繰り返し


//細分化した外側ループと内側ループの関係性のケース
/* 外側ループが`n=6`の時点での内側のループ
i = 1のとき: 6 % 1 == 0は真（割り切れる）。約数のカウントを1増やします。

i = 2のとき: 6 % 2 == 0も真（割り切れる）。約数のカウントをもう1増やします。

i = 3のとき: 6 % 3 == 0も真（割り切れる）。約数のカウントをさらに1増やします。

i = 4のとき: 6 % 4 != 0は偽（割り切れない）。約数のカウントは変わりません。

i = 5のとき: 6 % 5 != 0も偽（割り切れない）。約数のカウントは変わりません。

i = 6のとき: 6 % 6 == 0は真（割り切れる）。約数のカウントをもう1増やします。 */